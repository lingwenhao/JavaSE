动态的给一些对象添加一些额外的职责，就增加功能来说，装饰者模式比生成子类更加灵活
优点:
    装饰类和被装饰类可以独立发展，而不会相互耦合。
    装饰模式是继承关系的一个替代方案。
    装饰模式可以动态地扩展一个实现类的功能。
缺点
    多层装饰容易导致问题，尽量减少装饰类的数量，以便降低系统的复杂度。
应用场景
    需要扩展一个类的功能，或给一个类增加附加功能。
    需要动态地给一个对象增加功能，这些功能可以再动态地撤销。
    需要为一批的兄弟类进行改装或加装功能。
和继承的区别:
    继承是静态的给类增加功能，装饰者模式是动态的给类增加功能

角色:
    1.抽象组件（Component）角色：给出一个抽象类，以规范准备接收附加功能的对象。
    2.具体组件（Concrete Component）角色：定义一个将要接收附加功能的类。
    3.装饰（Decorator）角色：持有一个组件（Component）对象的实例，并实现一个与抽象构件接口一致的接口。
    4.具体装饰（Concrete Decorator）角色：负责给组件对象添加上附加的功能。

装饰者模式要点:
    1.装饰对象和真实对象有相同的接口。这样客户端对象就能以和真实对象相同的方式和装饰对象交互。
    2.装饰对象包含一个真实对象的引用（reference）。
    3.装饰对象接受所有来自客户端的请求。它把这些请求转发给真实的对象。
    4.装饰对象可以在转发这些请求以前或以后增加一些附加功能。这样就确保了在运行时，不用修改给定对象的结构就可以在外部增加附加的功能。在面向对象的设计中，通常是通过继承来实现对给定类的功能扩展。