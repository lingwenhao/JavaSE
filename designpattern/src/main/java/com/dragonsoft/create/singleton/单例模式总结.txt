1.核心作用:
    保证一个类只有一个实例,并提供一个访问该实例的全局访问点
2.常见场景:
    a.Windows操作系统的Task Manager(任务管理器)是很典型的单例模式
    b.Windows操作系统的资源管理器是很大的单例,因为一个操作系统只能有一个资源管理器
    c.读取配置文件的类,一般也是单例的,不会每次使用配置文件中的数据，都new一个对象去读取
    e.网站的计数器，也是使用单例模式实现,否则难以实现同步
    f.数据库连接池的设计一般也是单例模式，因为数据库连接是一种数据库资源(每次通过new产生会很耗费资源)
    g.Spring容器生产的bean,一般也是单例模式
    h.Servlet编程中Servlet是单例的,Application也是单例的
    i.单例模式适用于资源资源共享或者启动较慢的情况
3.单例模式的优点:
    a.由于单例模式只生成了一个实例,减少了系统的性能开销,当一个对象的产生需要较多资源的时候,如读取配置文件,则可以通过
    产生一个单例,永久驻留在内存中的方式来解决
    b.单例模式可以在系统设置全局的访问点,优化共享资源访问,例如可以设计一个单例类,负责所有数据表的映射
4.常见的五种单例模式实现方式:
    a.饿汉式(线程安全,调用效率高,但是不能延时加载)
    b.懒汉式(线程安全,调用效率不高,但是可以延时加载)
    c.双重检测锁式(由于JVM底层内部模型,偶尔会出问题,不建议使用)
    d.静态内部类式(线程安全,调用效率高,但是可以延时加载)
    e.枚举单例(线程安全,调用效率高,不能延时加载)
5.使用步骤:
    a.私有化构造方法
    b.提供一个被 private static 修饰的变量
    c.提供一个开放的可以供外部访问的方法
http://www.icoolxue.com/play/5511