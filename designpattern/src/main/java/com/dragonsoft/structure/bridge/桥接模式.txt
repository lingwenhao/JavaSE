概述:实现了抽象与行为实现的分离
    基于类的最小设计原则，同时使用封装、聚合以及继承等行为让不同的类承担不同的职责，
    他的主要特点是把抽象(Abstraction)和行为实现(Implementation)分离开来，从而
    八一保证各部分的独立性以及对他们功能的扩展
角色和职责:
    1.Client:调用端
    2.Abstraction:抽象类，充当桥接类的角色
          抽象类接口，维护行为实现(Implementation)的引用
    3.Refined Abstraction:抽象类子类
    4.Implementor:
          行为实现类接口（Abstraction接口定义了基于Implementor接口更高级层次的操作）
    5.Implementor的子类

优缺点:
优点:
    1.实现了抽象和实现部分的分离
        桥接模式分离了实现部分和抽象部分,从而提供了系统的灵活性，让抽象部分和实现部分独立开来，分别定义接口，这有助于
        系统的设计，从而产生更好的结构化系统，对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了
    2.抽象部分和实现部分分别独立，又不会相互影响，大大的提升了系统的可扩展性
    3.可动态的切换实现
        由于抽象和实现分离，在选择实现的时候可以动态的切换实现
    4.实现细节对客户端透明，可以对用户隐藏实现的细节
缺点:
    1.桥接模式的引入增加了系统的设计和理解的难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计和编程
    2.桥接模式要求正确的识别出系统中两个独立变化的维度，因此，其使用的范围有一定的局限性

使用场景:
    1.如果一个系统要在构建抽象化角色和具体角色之间增加更多的灵活性，避免在两个层次之前建立静态的继承关系，通过桥接
        可以使他们在抽象层建立一个关联关系
    2.抽象角色和实现化角色可以以继承的方式独立扩展而不相互影响，在程序运行时可以动态的将一个抽象化子类和一个实现化子类
        的对象进行相互组合，及系统需要对抽象化角色和实际化角色进行动态耦合
    3.一个类存在两个独立变化的维度，而且这两个维度都需要维护
    4.虽然在系统中使用继承时没有问题的，但是由于抽象化角色和具体化角色都需要独立变化，设计者要求独立管理这两者
    5.对于那些不希望使用继承或者因为多层继承导致系统类爆炸的系统，桥接模式尤为适用

深入理解:一个事物有多种形态并且可以实现多种行为，事物的形态为一个接口，行为表现为一个接口，那么一般情况下事物形态的一个抽象父类当然实现了事物形态接口就是bridge
   手机:
        形态(Phone):翻盖、滑盖、直板机
        行为(Brand):Vivo、小米、华为
   消息组件设计:
        形态:短信类型的消息、邮件类型的消息
        行为:发送短信、发送邮件
   银行存款设计:
        形态:银行卡的类型、借记卡/储蓄卡
        行为:活期存储、死期存储