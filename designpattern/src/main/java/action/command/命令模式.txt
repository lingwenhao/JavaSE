命令模式(Commande):
    描述:
        -将一个请求封装为一个对象,从而使你可以用不同的请求对客户端进行参数化，对请求排队或者记录请求日志，以及支持可撤销的操作
        -命令模式是一种数据驱动的设计模式，属于行为模式类别。 请求作为命令包装在对象下并传递给调用者对象。 Invoker对象查找可以处理此命令的相应对象，并将该命令传递给执行该命令的相应对象。
        -将命令的请求者和执行者解耦，通过命令关联起来
        -在命令者模式中,会为一个请求封装一个对象,以便不同的参数来表示不同的请求(即命令)
        -命令模式必须支持撤回操作
    角色分析:
        -调用者(Invoker): 要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口
        -命令接口(Command):,需要执行的所有接口都在这里,可以是接口或抽象类
        -接收者(Receiver):,知道如何实施和执行一个请求相关的操作
        -具体的命令(ConcreteCommad):将一个接收者对象与一个动作,调用接收者的相关操作,实现execute
        -客户端(Client):创建具体的命令对象，并且设置命令对象的接收者。注意这个不是我们常规意义上的客户端，而是在
         组装命令对象和接收者，或许，把这个Client称为装配者会更好理解，因为真正使用命令的客户端是从Invoker来触
         发执行。
    好处:
        -让对象之间的调用关系更加灵活，实现解耦
	示例/场景:
	深入分析:
	    -命令模式的关键之处就是把请求封装成为对象，也就是命令对象，并定义了统一的执行操作的接口，这个命令对象可以
	     被存储、转发、记录、处理、撤销等，整个命令模式都是围绕这个对象在进行。
	    -可撤销的操作:
	    3.3  可撤销的操作
	        补偿式(反操作式):比如被撤销的操作是加的功能，那撤消的实现就变成减的功能；同理被撤销的操作是打开的功能，那么撤销的实现就变成关闭的功能。
            恢复存储式:把操作前的状态记录下来，然后要撤销操作的时候就直接恢复回去就可以了。
